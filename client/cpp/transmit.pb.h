// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transmit.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_transmit_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_transmit_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transmit_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transmit_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transmit_2eproto;
namespace transmit {
class Cron;
struct CronDefaultTypeInternal;
extern CronDefaultTypeInternal _Cron_default_instance_;
class Delayed;
struct DelayedDefaultTypeInternal;
extern DelayedDefaultTypeInternal _Delayed_default_instance_;
class HealthCheckRequest;
struct HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class Interval;
struct IntervalDefaultTypeInternal;
extern IntervalDefaultTypeInternal _Interval_default_instance_;
class NatsEvent;
struct NatsEventDefaultTypeInternal;
extern NatsEventDefaultTypeInternal _NatsEvent_default_instance_;
class ScheduleTransmissionRequest;
struct ScheduleTransmissionRequestDefaultTypeInternal;
extern ScheduleTransmissionRequestDefaultTypeInternal _ScheduleTransmissionRequest_default_instance_;
class ScheduleTransmissionResponse;
struct ScheduleTransmissionResponseDefaultTypeInternal;
extern ScheduleTransmissionResponseDefaultTypeInternal _ScheduleTransmissionResponse_default_instance_;
}  // namespace transmit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace transmit {
enum HealthCheckResponse_ServingStatus : int {
  HealthCheckResponse_ServingStatus_UNKNOWN = 0,
  HealthCheckResponse_ServingStatus_SERVING = 1,
  HealthCheckResponse_ServingStatus_NOT_SERVING = 2,
  HealthCheckResponse_ServingStatus_SERVICE_UNKNOWN = 3,
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HealthCheckResponse_ServingStatus_IsValid(int value);
extern const uint32_t HealthCheckResponse_ServingStatus_internal_data_[];
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MIN = static_cast<HealthCheckResponse_ServingStatus>(0);
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MAX = static_cast<HealthCheckResponse_ServingStatus>(3);
constexpr int HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
HealthCheckResponse_ServingStatus_descriptor();
template <typename T>
const std::string& HealthCheckResponse_ServingStatus_Name(T value) {
  static_assert(std::is_same<T, HealthCheckResponse_ServingStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ServingStatus_Name().");
  return HealthCheckResponse_ServingStatus_Name(static_cast<HealthCheckResponse_ServingStatus>(value));
}
template <>
inline const std::string& HealthCheckResponse_ServingStatus_Name(HealthCheckResponse_ServingStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HealthCheckResponse_ServingStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool HealthCheckResponse_ServingStatus_Parse(absl::string_view name, HealthCheckResponse_ServingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HealthCheckResponse_ServingStatus>(
      HealthCheckResponse_ServingStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ScheduleTransmissionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.ScheduleTransmissionResponse) */ {
 public:
  inline ScheduleTransmissionResponse() : ScheduleTransmissionResponse(nullptr) {}
  ~ScheduleTransmissionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ScheduleTransmissionResponse(::google::protobuf::internal::ConstantInitialized);

  inline ScheduleTransmissionResponse(const ScheduleTransmissionResponse& from)
      : ScheduleTransmissionResponse(nullptr, from) {}
  ScheduleTransmissionResponse(ScheduleTransmissionResponse&& from) noexcept
    : ScheduleTransmissionResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleTransmissionResponse& operator=(const ScheduleTransmissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleTransmissionResponse& operator=(ScheduleTransmissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleTransmissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleTransmissionResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleTransmissionResponse*>(
               &_ScheduleTransmissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleTransmissionResponse& a, ScheduleTransmissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleTransmissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleTransmissionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleTransmissionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleTransmissionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScheduleTransmissionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ScheduleTransmissionResponse& from) {
    ScheduleTransmissionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScheduleTransmissionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.ScheduleTransmissionResponse";
  }
  protected:
  explicit ScheduleTransmissionResponse(::google::protobuf::Arena* arena);
  ScheduleTransmissionResponse(::google::protobuf::Arena* arena, const ScheduleTransmissionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransmissionIdFieldNumber = 1,
  };
  // string transmission_id = 1;
  void clear_transmission_id() ;
  const std::string& transmission_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transmission_id(Arg_&& arg, Args_... args);
  std::string* mutable_transmission_id();
  PROTOBUF_NODISCARD std::string* release_transmission_id();
  void set_allocated_transmission_id(std::string* value);

  private:
  const std::string& _internal_transmission_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transmission_id(
      const std::string& value);
  std::string* _internal_mutable_transmission_id();

  public:
  // @@protoc_insertion_point(class_scope:transmit.ScheduleTransmissionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr transmission_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};// -------------------------------------------------------------------

class NatsEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.NatsEvent) */ {
 public:
  inline NatsEvent() : NatsEvent(nullptr) {}
  ~NatsEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NatsEvent(::google::protobuf::internal::ConstantInitialized);

  inline NatsEvent(const NatsEvent& from)
      : NatsEvent(nullptr, from) {}
  NatsEvent(NatsEvent&& from) noexcept
    : NatsEvent() {
    *this = ::std::move(from);
  }

  inline NatsEvent& operator=(const NatsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NatsEvent& operator=(NatsEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NatsEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NatsEvent* internal_default_instance() {
    return reinterpret_cast<const NatsEvent*>(
               &_NatsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NatsEvent& a, NatsEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NatsEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NatsEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NatsEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NatsEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NatsEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NatsEvent& from) {
    NatsEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NatsEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.NatsEvent";
  }
  protected:
  explicit NatsEvent(::google::protobuf::Arena* arena);
  NatsEvent(::google::protobuf::Arena* arena, const NatsEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string subject = 1;
  void clear_subject() ;
  const std::string& subject() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* value);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:transmit.NatsEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr subject_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};// -------------------------------------------------------------------

class HealthCheckResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  ~HealthCheckResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HealthCheckResponse(::google::protobuf::internal::ConstantInitialized);

  inline HealthCheckResponse(const HealthCheckResponse& from)
      : HealthCheckResponse(nullptr, from) {}
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthCheckResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HealthCheckResponse& from) {
    HealthCheckResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HealthCheckResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::google::protobuf::Arena* arena);
  HealthCheckResponse(::google::protobuf::Arena* arena, const HealthCheckResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ServingStatus = HealthCheckResponse_ServingStatus;
  static constexpr ServingStatus UNKNOWN = HealthCheckResponse_ServingStatus_UNKNOWN;
  static constexpr ServingStatus SERVING = HealthCheckResponse_ServingStatus_SERVING;
  static constexpr ServingStatus NOT_SERVING = HealthCheckResponse_ServingStatus_NOT_SERVING;
  static constexpr ServingStatus SERVICE_UNKNOWN = HealthCheckResponse_ServingStatus_SERVICE_UNKNOWN;
  static inline bool ServingStatus_IsValid(int value) {
    return HealthCheckResponse_ServingStatus_IsValid(value);
  }
  static constexpr ServingStatus ServingStatus_MIN = HealthCheckResponse_ServingStatus_ServingStatus_MIN;
  static constexpr ServingStatus ServingStatus_MAX = HealthCheckResponse_ServingStatus_ServingStatus_MAX;
  static constexpr int ServingStatus_ARRAYSIZE = HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ServingStatus_descriptor() {
    return HealthCheckResponse_ServingStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& ServingStatus_Name(T value) {
    return HealthCheckResponse_ServingStatus_Name(value);
  }
  static inline bool ServingStatus_Parse(absl::string_view name, ServingStatus* value) {
    return HealthCheckResponse_ServingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .transmit.HealthCheckResponse.ServingStatus status = 1;
  void clear_status() ;
  ::transmit::HealthCheckResponse_ServingStatus status() const;
  void set_status(::transmit::HealthCheckResponse_ServingStatus value);

  private:
  ::transmit::HealthCheckResponse_ServingStatus _internal_status() const;
  void _internal_set_status(::transmit::HealthCheckResponse_ServingStatus value);

  public:
  // @@protoc_insertion_point(class_scope:transmit.HealthCheckResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};// -------------------------------------------------------------------

class HealthCheckRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {}
  ~HealthCheckRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HealthCheckRequest(::google::protobuf::internal::ConstantInitialized);

  inline HealthCheckRequest(const HealthCheckRequest& from)
      : HealthCheckRequest(nullptr, from) {}
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthCheckRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HealthCheckRequest& from) {
    HealthCheckRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HealthCheckRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.HealthCheckRequest";
  }
  protected:
  explicit HealthCheckRequest(::google::protobuf::Arena* arena);
  HealthCheckRequest(::google::protobuf::Arena* arena, const HealthCheckRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // string service = 1;
  void clear_service() ;
  const std::string& service() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service(Arg_&& arg, Args_... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* value);

  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
      const std::string& value);
  std::string* _internal_mutable_service();

  public:
  // @@protoc_insertion_point(class_scope:transmit.HealthCheckRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr service_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};// -------------------------------------------------------------------

class Interval final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.Interval) */ {
 public:
  inline Interval() : Interval(nullptr) {}
  ~Interval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Interval(::google::protobuf::internal::ConstantInitialized);

  inline Interval(const Interval& from)
      : Interval(nullptr, from) {}
  Interval(Interval&& from) noexcept
    : Interval() {
    *this = ::std::move(from);
  }

  inline Interval& operator=(const Interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interval& operator=(Interval&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interval& default_instance() {
    return *internal_default_instance();
  }
  enum IterateCase {
    kTimes = 3,
    kInfinitely = 4,
    ITERATE_NOT_SET = 0,
  };

  static inline const Interval* internal_default_instance() {
    return reinterpret_cast<const Interval*>(
               &_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Interval& a, Interval& b) {
    a.Swap(&b);
  }
  inline void Swap(Interval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interval* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interval>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Interval& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Interval& from) {
    Interval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Interval* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.Interval";
  }
  protected:
  explicit Interval(::google::protobuf::Arena* arena);
  Interval(::google::protobuf::Arena* arena, const Interval& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstTransmissionFieldNumber = 1,
    kIntervalFieldNumber = 2,
    kTimesFieldNumber = 3,
    kInfinitelyFieldNumber = 4,
  };
  // .google.protobuf.Timestamp first_transmission = 1;
  bool has_first_transmission() const;
  void clear_first_transmission() ;
  const ::google::protobuf::Timestamp& first_transmission() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_transmission();
  ::google::protobuf::Timestamp* mutable_first_transmission();
  void set_allocated_first_transmission(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_transmission(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_transmission();

  private:
  const ::google::protobuf::Timestamp& _internal_first_transmission() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_transmission();

  public:
  // .google.protobuf.Duration interval = 2;
  bool has_interval() const;
  void clear_interval() ;
  const ::google::protobuf::Duration& interval() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_interval();
  ::google::protobuf::Duration* mutable_interval();
  void set_allocated_interval(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_interval(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_interval();

  private:
  const ::google::protobuf::Duration& _internal_interval() const;
  ::google::protobuf::Duration* _internal_mutable_interval();

  public:
  // uint32 times = 3;
  bool has_times() const;
  void clear_times() ;
  ::uint32_t times() const;
  void set_times(::uint32_t value);

  private:
  ::uint32_t _internal_times() const;
  void _internal_set_times(::uint32_t value);

  public:
  // bool infinitely = 4;
  bool has_infinitely() const;
  void clear_infinitely() ;
  bool infinitely() const;
  void set_infinitely(bool value);

  private:
  bool _internal_infinitely() const;
  void _internal_set_infinitely(bool value);

  public:
  void clear_Iterate();
  IterateCase Iterate_case() const;
  // @@protoc_insertion_point(class_scope:transmit.Interval)
 private:
  class _Internal;
  void set_has_times();
  void set_has_infinitely();

  inline bool has_Iterate() const;
  inline void clear_has_Iterate();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* first_transmission_;
    ::google::protobuf::Duration* interval_;
    union IterateUnion {
      constexpr IterateUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint32_t times_;
      bool infinitely_;
    } Iterate_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};// -------------------------------------------------------------------

class Delayed final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.Delayed) */ {
 public:
  inline Delayed() : Delayed(nullptr) {}
  ~Delayed() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Delayed(::google::protobuf::internal::ConstantInitialized);

  inline Delayed(const Delayed& from)
      : Delayed(nullptr, from) {}
  Delayed(Delayed&& from) noexcept
    : Delayed() {
    *this = ::std::move(from);
  }

  inline Delayed& operator=(const Delayed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delayed& operator=(Delayed&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Delayed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Delayed* internal_default_instance() {
    return reinterpret_cast<const Delayed*>(
               &_Delayed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Delayed& a, Delayed& b) {
    a.Swap(&b);
  }
  inline void Swap(Delayed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Delayed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Delayed* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Delayed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Delayed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Delayed& from) {
    Delayed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Delayed* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.Delayed";
  }
  protected:
  explicit Delayed(::google::protobuf::Arena* arena);
  Delayed(::google::protobuf::Arena* arena, const Delayed& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransmitAtFieldNumber = 1,
  };
  // .google.protobuf.Timestamp transmit_at = 1;
  bool has_transmit_at() const;
  void clear_transmit_at() ;
  const ::google::protobuf::Timestamp& transmit_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_transmit_at();
  ::google::protobuf::Timestamp* mutable_transmit_at();
  void set_allocated_transmit_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_transmit_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_transmit_at();

  private:
  const ::google::protobuf::Timestamp& _internal_transmit_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_transmit_at();

  public:
  // @@protoc_insertion_point(class_scope:transmit.Delayed)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* transmit_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};// -------------------------------------------------------------------

class Cron final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.Cron) */ {
 public:
  inline Cron() : Cron(nullptr) {}
  ~Cron() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Cron(::google::protobuf::internal::ConstantInitialized);

  inline Cron(const Cron& from)
      : Cron(nullptr, from) {}
  Cron(Cron&& from) noexcept
    : Cron() {
    *this = ::std::move(from);
  }

  inline Cron& operator=(const Cron& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cron& operator=(Cron&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cron& default_instance() {
    return *internal_default_instance();
  }
  enum IterateCase {
    kTimes = 3,
    kInfinitely = 4,
    ITERATE_NOT_SET = 0,
  };

  static inline const Cron* internal_default_instance() {
    return reinterpret_cast<const Cron*>(
               &_Cron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Cron& a, Cron& b) {
    a.Swap(&b);
  }
  inline void Swap(Cron* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cron* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cron* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cron>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Cron& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Cron& from) {
    Cron::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Cron* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.Cron";
  }
  protected:
  explicit Cron(::google::protobuf::Arena* arena);
  Cron(::google::protobuf::Arena* arena, const Cron& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScheduleFieldNumber = 2,
    kFirstTransmissionAfterFieldNumber = 1,
    kTimesFieldNumber = 3,
    kInfinitelyFieldNumber = 4,
  };
  // string schedule = 2;
  void clear_schedule() ;
  const std::string& schedule() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schedule(Arg_&& arg, Args_... args);
  std::string* mutable_schedule();
  PROTOBUF_NODISCARD std::string* release_schedule();
  void set_allocated_schedule(std::string* value);

  private:
  const std::string& _internal_schedule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schedule(
      const std::string& value);
  std::string* _internal_mutable_schedule();

  public:
  // .google.protobuf.Timestamp first_transmission_after = 1;
  bool has_first_transmission_after() const;
  void clear_first_transmission_after() ;
  const ::google::protobuf::Timestamp& first_transmission_after() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_first_transmission_after();
  ::google::protobuf::Timestamp* mutable_first_transmission_after();
  void set_allocated_first_transmission_after(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_first_transmission_after(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_first_transmission_after();

  private:
  const ::google::protobuf::Timestamp& _internal_first_transmission_after() const;
  ::google::protobuf::Timestamp* _internal_mutable_first_transmission_after();

  public:
  // uint32 times = 3;
  bool has_times() const;
  void clear_times() ;
  ::uint32_t times() const;
  void set_times(::uint32_t value);

  private:
  ::uint32_t _internal_times() const;
  void _internal_set_times(::uint32_t value);

  public:
  // bool infinitely = 4;
  bool has_infinitely() const;
  void clear_infinitely() ;
  bool infinitely() const;
  void set_infinitely(bool value);

  private:
  bool _internal_infinitely() const;
  void _internal_set_infinitely(bool value);

  public:
  void clear_Iterate();
  IterateCase Iterate_case() const;
  // @@protoc_insertion_point(class_scope:transmit.Cron)
 private:
  class _Internal;
  void set_has_times();
  void set_has_infinitely();

  inline bool has_Iterate() const;
  inline void clear_has_Iterate();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 1,
      30, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr schedule_;
    ::google::protobuf::Timestamp* first_transmission_after_;
    union IterateUnion {
      constexpr IterateUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint32_t times_;
      bool infinitely_;
    } Iterate_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};// -------------------------------------------------------------------

class ScheduleTransmissionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmit.ScheduleTransmissionRequest) */ {
 public:
  inline ScheduleTransmissionRequest() : ScheduleTransmissionRequest(nullptr) {}
  ~ScheduleTransmissionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ScheduleTransmissionRequest(::google::protobuf::internal::ConstantInitialized);

  inline ScheduleTransmissionRequest(const ScheduleTransmissionRequest& from)
      : ScheduleTransmissionRequest(nullptr, from) {}
  ScheduleTransmissionRequest(ScheduleTransmissionRequest&& from) noexcept
    : ScheduleTransmissionRequest() {
    *this = ::std::move(from);
  }

  inline ScheduleTransmissionRequest& operator=(const ScheduleTransmissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleTransmissionRequest& operator=(ScheduleTransmissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleTransmissionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ScheduleCase {
    kDelayed = 1,
    kInterval = 2,
    kCron = 3,
    SCHEDULE_NOT_SET = 0,
  };

  enum MessageCase {
    kNatsEvent = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const ScheduleTransmissionRequest* internal_default_instance() {
    return reinterpret_cast<const ScheduleTransmissionRequest*>(
               &_ScheduleTransmissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScheduleTransmissionRequest& a, ScheduleTransmissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleTransmissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleTransmissionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleTransmissionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleTransmissionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScheduleTransmissionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ScheduleTransmissionRequest& from) {
    ScheduleTransmissionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScheduleTransmissionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transmit.ScheduleTransmissionRequest";
  }
  protected:
  explicit ScheduleTransmissionRequest(::google::protobuf::Arena* arena);
  ScheduleTransmissionRequest(::google::protobuf::Arena* arena, const ScheduleTransmissionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelayedFieldNumber = 1,
    kIntervalFieldNumber = 2,
    kCronFieldNumber = 3,
    kNatsEventFieldNumber = 4,
  };
  // .transmit.Delayed delayed = 1;
  bool has_delayed() const;
  private:
  bool _internal_has_delayed() const;

  public:
  void clear_delayed() ;
  const ::transmit::Delayed& delayed() const;
  PROTOBUF_NODISCARD ::transmit::Delayed* release_delayed();
  ::transmit::Delayed* mutable_delayed();
  void set_allocated_delayed(::transmit::Delayed* value);
  void unsafe_arena_set_allocated_delayed(::transmit::Delayed* value);
  ::transmit::Delayed* unsafe_arena_release_delayed();

  private:
  const ::transmit::Delayed& _internal_delayed() const;
  ::transmit::Delayed* _internal_mutable_delayed();

  public:
  // .transmit.Interval interval = 2;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;

  public:
  void clear_interval() ;
  const ::transmit::Interval& interval() const;
  PROTOBUF_NODISCARD ::transmit::Interval* release_interval();
  ::transmit::Interval* mutable_interval();
  void set_allocated_interval(::transmit::Interval* value);
  void unsafe_arena_set_allocated_interval(::transmit::Interval* value);
  ::transmit::Interval* unsafe_arena_release_interval();

  private:
  const ::transmit::Interval& _internal_interval() const;
  ::transmit::Interval* _internal_mutable_interval();

  public:
  // .transmit.Cron cron = 3;
  bool has_cron() const;
  private:
  bool _internal_has_cron() const;

  public:
  void clear_cron() ;
  const ::transmit::Cron& cron() const;
  PROTOBUF_NODISCARD ::transmit::Cron* release_cron();
  ::transmit::Cron* mutable_cron();
  void set_allocated_cron(::transmit::Cron* value);
  void unsafe_arena_set_allocated_cron(::transmit::Cron* value);
  ::transmit::Cron* unsafe_arena_release_cron();

  private:
  const ::transmit::Cron& _internal_cron() const;
  ::transmit::Cron* _internal_mutable_cron();

  public:
  // .transmit.NatsEvent nats_event = 4;
  bool has_nats_event() const;
  private:
  bool _internal_has_nats_event() const;

  public:
  void clear_nats_event() ;
  const ::transmit::NatsEvent& nats_event() const;
  PROTOBUF_NODISCARD ::transmit::NatsEvent* release_nats_event();
  ::transmit::NatsEvent* mutable_nats_event();
  void set_allocated_nats_event(::transmit::NatsEvent* value);
  void unsafe_arena_set_allocated_nats_event(::transmit::NatsEvent* value);
  ::transmit::NatsEvent* unsafe_arena_release_nats_event();

  private:
  const ::transmit::NatsEvent& _internal_nats_event() const;
  ::transmit::NatsEvent* _internal_mutable_nats_event();

  public:
  void clear_Schedule();
  ScheduleCase Schedule_case() const;
  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:transmit.ScheduleTransmissionRequest)
 private:
  class _Internal;
  void set_has_delayed();
  void set_has_interval();
  void set_has_cron();
  void set_has_nats_event();

  inline bool has_Schedule() const;
  inline void clear_has_Schedule();

  inline bool has_Message() const;
  inline void clear_has_Message();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ScheduleUnion {
      constexpr ScheduleUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::transmit::Delayed* delayed_;
      ::transmit::Interval* interval_;
      ::transmit::Cron* cron_;
    } Schedule_;
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::transmit::NatsEvent* nats_event_;
    } Message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transmit_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ScheduleTransmissionRequest

// .transmit.Delayed delayed = 1;
inline bool ScheduleTransmissionRequest::has_delayed() const {
  return Schedule_case() == kDelayed;
}
inline bool ScheduleTransmissionRequest::_internal_has_delayed() const {
  return Schedule_case() == kDelayed;
}
inline void ScheduleTransmissionRequest::set_has_delayed() {
  _impl_._oneof_case_[0] = kDelayed;
}
inline void ScheduleTransmissionRequest::clear_delayed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Schedule_case() == kDelayed) {
    if (GetArena() == nullptr) {
      delete _impl_.Schedule_.delayed_;
    }
    clear_has_Schedule();
  }
}
inline ::transmit::Delayed* ScheduleTransmissionRequest::release_delayed() {
  // @@protoc_insertion_point(field_release:transmit.ScheduleTransmissionRequest.delayed)
  if (Schedule_case() == kDelayed) {
    clear_has_Schedule();
    auto* temp = _impl_.Schedule_.delayed_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Schedule_.delayed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transmit::Delayed& ScheduleTransmissionRequest::_internal_delayed() const {
  return Schedule_case() == kDelayed ? *_impl_.Schedule_.delayed_ : reinterpret_cast<::transmit::Delayed&>(::transmit::_Delayed_default_instance_);
}
inline const ::transmit::Delayed& ScheduleTransmissionRequest::delayed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.ScheduleTransmissionRequest.delayed)
  return _internal_delayed();
}
inline ::transmit::Delayed* ScheduleTransmissionRequest::unsafe_arena_release_delayed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transmit.ScheduleTransmissionRequest.delayed)
  if (Schedule_case() == kDelayed) {
    clear_has_Schedule();
    auto* temp = _impl_.Schedule_.delayed_;
    _impl_.Schedule_.delayed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScheduleTransmissionRequest::unsafe_arena_set_allocated_delayed(::transmit::Delayed* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Schedule();
  if (value) {
    set_has_delayed();
    _impl_.Schedule_.delayed_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.ScheduleTransmissionRequest.delayed)
}
inline ::transmit::Delayed* ScheduleTransmissionRequest::_internal_mutable_delayed() {
  if (Schedule_case() != kDelayed) {
    clear_Schedule();
    set_has_delayed();
    _impl_.Schedule_.delayed_ = CreateMaybeMessage<::transmit::Delayed>(GetArena());
  }
  return _impl_.Schedule_.delayed_;
}
inline ::transmit::Delayed* ScheduleTransmissionRequest::mutable_delayed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transmit::Delayed* _msg = _internal_mutable_delayed();
  // @@protoc_insertion_point(field_mutable:transmit.ScheduleTransmissionRequest.delayed)
  return _msg;
}

// .transmit.Interval interval = 2;
inline bool ScheduleTransmissionRequest::has_interval() const {
  return Schedule_case() == kInterval;
}
inline bool ScheduleTransmissionRequest::_internal_has_interval() const {
  return Schedule_case() == kInterval;
}
inline void ScheduleTransmissionRequest::set_has_interval() {
  _impl_._oneof_case_[0] = kInterval;
}
inline void ScheduleTransmissionRequest::clear_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Schedule_case() == kInterval) {
    if (GetArena() == nullptr) {
      delete _impl_.Schedule_.interval_;
    }
    clear_has_Schedule();
  }
}
inline ::transmit::Interval* ScheduleTransmissionRequest::release_interval() {
  // @@protoc_insertion_point(field_release:transmit.ScheduleTransmissionRequest.interval)
  if (Schedule_case() == kInterval) {
    clear_has_Schedule();
    auto* temp = _impl_.Schedule_.interval_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Schedule_.interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transmit::Interval& ScheduleTransmissionRequest::_internal_interval() const {
  return Schedule_case() == kInterval ? *_impl_.Schedule_.interval_ : reinterpret_cast<::transmit::Interval&>(::transmit::_Interval_default_instance_);
}
inline const ::transmit::Interval& ScheduleTransmissionRequest::interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.ScheduleTransmissionRequest.interval)
  return _internal_interval();
}
inline ::transmit::Interval* ScheduleTransmissionRequest::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transmit.ScheduleTransmissionRequest.interval)
  if (Schedule_case() == kInterval) {
    clear_has_Schedule();
    auto* temp = _impl_.Schedule_.interval_;
    _impl_.Schedule_.interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScheduleTransmissionRequest::unsafe_arena_set_allocated_interval(::transmit::Interval* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Schedule();
  if (value) {
    set_has_interval();
    _impl_.Schedule_.interval_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.ScheduleTransmissionRequest.interval)
}
inline ::transmit::Interval* ScheduleTransmissionRequest::_internal_mutable_interval() {
  if (Schedule_case() != kInterval) {
    clear_Schedule();
    set_has_interval();
    _impl_.Schedule_.interval_ = CreateMaybeMessage<::transmit::Interval>(GetArena());
  }
  return _impl_.Schedule_.interval_;
}
inline ::transmit::Interval* ScheduleTransmissionRequest::mutable_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transmit::Interval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:transmit.ScheduleTransmissionRequest.interval)
  return _msg;
}

// .transmit.Cron cron = 3;
inline bool ScheduleTransmissionRequest::has_cron() const {
  return Schedule_case() == kCron;
}
inline bool ScheduleTransmissionRequest::_internal_has_cron() const {
  return Schedule_case() == kCron;
}
inline void ScheduleTransmissionRequest::set_has_cron() {
  _impl_._oneof_case_[0] = kCron;
}
inline void ScheduleTransmissionRequest::clear_cron() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Schedule_case() == kCron) {
    if (GetArena() == nullptr) {
      delete _impl_.Schedule_.cron_;
    }
    clear_has_Schedule();
  }
}
inline ::transmit::Cron* ScheduleTransmissionRequest::release_cron() {
  // @@protoc_insertion_point(field_release:transmit.ScheduleTransmissionRequest.cron)
  if (Schedule_case() == kCron) {
    clear_has_Schedule();
    auto* temp = _impl_.Schedule_.cron_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Schedule_.cron_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transmit::Cron& ScheduleTransmissionRequest::_internal_cron() const {
  return Schedule_case() == kCron ? *_impl_.Schedule_.cron_ : reinterpret_cast<::transmit::Cron&>(::transmit::_Cron_default_instance_);
}
inline const ::transmit::Cron& ScheduleTransmissionRequest::cron() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.ScheduleTransmissionRequest.cron)
  return _internal_cron();
}
inline ::transmit::Cron* ScheduleTransmissionRequest::unsafe_arena_release_cron() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transmit.ScheduleTransmissionRequest.cron)
  if (Schedule_case() == kCron) {
    clear_has_Schedule();
    auto* temp = _impl_.Schedule_.cron_;
    _impl_.Schedule_.cron_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScheduleTransmissionRequest::unsafe_arena_set_allocated_cron(::transmit::Cron* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Schedule();
  if (value) {
    set_has_cron();
    _impl_.Schedule_.cron_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.ScheduleTransmissionRequest.cron)
}
inline ::transmit::Cron* ScheduleTransmissionRequest::_internal_mutable_cron() {
  if (Schedule_case() != kCron) {
    clear_Schedule();
    set_has_cron();
    _impl_.Schedule_.cron_ = CreateMaybeMessage<::transmit::Cron>(GetArena());
  }
  return _impl_.Schedule_.cron_;
}
inline ::transmit::Cron* ScheduleTransmissionRequest::mutable_cron() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transmit::Cron* _msg = _internal_mutable_cron();
  // @@protoc_insertion_point(field_mutable:transmit.ScheduleTransmissionRequest.cron)
  return _msg;
}

// .transmit.NatsEvent nats_event = 4;
inline bool ScheduleTransmissionRequest::has_nats_event() const {
  return Message_case() == kNatsEvent;
}
inline bool ScheduleTransmissionRequest::_internal_has_nats_event() const {
  return Message_case() == kNatsEvent;
}
inline void ScheduleTransmissionRequest::set_has_nats_event() {
  _impl_._oneof_case_[1] = kNatsEvent;
}
inline void ScheduleTransmissionRequest::clear_nats_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Message_case() == kNatsEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.Message_.nats_event_;
    }
    clear_has_Message();
  }
}
inline ::transmit::NatsEvent* ScheduleTransmissionRequest::release_nats_event() {
  // @@protoc_insertion_point(field_release:transmit.ScheduleTransmissionRequest.nats_event)
  if (Message_case() == kNatsEvent) {
    clear_has_Message();
    auto* temp = _impl_.Message_.nats_event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.nats_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transmit::NatsEvent& ScheduleTransmissionRequest::_internal_nats_event() const {
  return Message_case() == kNatsEvent ? *_impl_.Message_.nats_event_ : reinterpret_cast<::transmit::NatsEvent&>(::transmit::_NatsEvent_default_instance_);
}
inline const ::transmit::NatsEvent& ScheduleTransmissionRequest::nats_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.ScheduleTransmissionRequest.nats_event)
  return _internal_nats_event();
}
inline ::transmit::NatsEvent* ScheduleTransmissionRequest::unsafe_arena_release_nats_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transmit.ScheduleTransmissionRequest.nats_event)
  if (Message_case() == kNatsEvent) {
    clear_has_Message();
    auto* temp = _impl_.Message_.nats_event_;
    _impl_.Message_.nats_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScheduleTransmissionRequest::unsafe_arena_set_allocated_nats_event(::transmit::NatsEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Message();
  if (value) {
    set_has_nats_event();
    _impl_.Message_.nats_event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.ScheduleTransmissionRequest.nats_event)
}
inline ::transmit::NatsEvent* ScheduleTransmissionRequest::_internal_mutable_nats_event() {
  if (Message_case() != kNatsEvent) {
    clear_Message();
    set_has_nats_event();
    _impl_.Message_.nats_event_ = CreateMaybeMessage<::transmit::NatsEvent>(GetArena());
  }
  return _impl_.Message_.nats_event_;
}
inline ::transmit::NatsEvent* ScheduleTransmissionRequest::mutable_nats_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transmit::NatsEvent* _msg = _internal_mutable_nats_event();
  // @@protoc_insertion_point(field_mutable:transmit.ScheduleTransmissionRequest.nats_event)
  return _msg;
}

inline bool ScheduleTransmissionRequest::has_Schedule() const {
  return Schedule_case() != SCHEDULE_NOT_SET;
}
inline void ScheduleTransmissionRequest::clear_has_Schedule() {
  _impl_._oneof_case_[0] = SCHEDULE_NOT_SET;
}
inline bool ScheduleTransmissionRequest::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void ScheduleTransmissionRequest::clear_has_Message() {
  _impl_._oneof_case_[1] = MESSAGE_NOT_SET;
}
inline ScheduleTransmissionRequest::ScheduleCase ScheduleTransmissionRequest::Schedule_case() const {
  return ScheduleTransmissionRequest::ScheduleCase(_impl_._oneof_case_[0]);
}
inline ScheduleTransmissionRequest::MessageCase ScheduleTransmissionRequest::Message_case() const {
  return ScheduleTransmissionRequest::MessageCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// ScheduleTransmissionResponse

// string transmission_id = 1;
inline void ScheduleTransmissionResponse::clear_transmission_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transmission_id_.ClearToEmpty();
}
inline const std::string& ScheduleTransmissionResponse::transmission_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.ScheduleTransmissionResponse.transmission_id)
  return _internal_transmission_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScheduleTransmissionResponse::set_transmission_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transmission_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transmit.ScheduleTransmissionResponse.transmission_id)
}
inline std::string* ScheduleTransmissionResponse::mutable_transmission_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transmission_id();
  // @@protoc_insertion_point(field_mutable:transmit.ScheduleTransmissionResponse.transmission_id)
  return _s;
}
inline const std::string& ScheduleTransmissionResponse::_internal_transmission_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transmission_id_.Get();
}
inline void ScheduleTransmissionResponse::_internal_set_transmission_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.transmission_id_.Set(value, GetArena());
}
inline std::string* ScheduleTransmissionResponse::_internal_mutable_transmission_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.transmission_id_.Mutable( GetArena());
}
inline std::string* ScheduleTransmissionResponse::release_transmission_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.ScheduleTransmissionResponse.transmission_id)
  return _impl_.transmission_id_.Release();
}
inline void ScheduleTransmissionResponse::set_allocated_transmission_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transmission_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transmission_id_.IsDefault()) {
          _impl_.transmission_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transmit.ScheduleTransmissionResponse.transmission_id)
}

// -------------------------------------------------------------------

// NatsEvent

// string subject = 1;
inline void NatsEvent::clear_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& NatsEvent::subject() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.NatsEvent.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NatsEvent::set_subject(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transmit.NatsEvent.subject)
}
inline std::string* NatsEvent::mutable_subject() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:transmit.NatsEvent.subject)
  return _s;
}
inline const std::string& NatsEvent::_internal_subject() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subject_.Get();
}
inline void NatsEvent::_internal_set_subject(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subject_.Set(value, GetArena());
}
inline std::string* NatsEvent::_internal_mutable_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subject_.Mutable( GetArena());
}
inline std::string* NatsEvent::release_subject() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.NatsEvent.subject)
  return _impl_.subject_.Release();
}
inline void NatsEvent::set_allocated_subject(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subject_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transmit.NatsEvent.subject)
}

// bytes payload = 2;
inline void NatsEvent::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& NatsEvent::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.NatsEvent.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NatsEvent::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transmit.NatsEvent.payload)
}
inline std::string* NatsEvent::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:transmit.NatsEvent.payload)
  return _s;
}
inline const std::string& NatsEvent::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void NatsEvent::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* NatsEvent::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* NatsEvent::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.NatsEvent.payload)
  return _impl_.payload_.Release();
}
inline void NatsEvent::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transmit.NatsEvent.payload)
}

// -------------------------------------------------------------------

// Delayed

// .google.protobuf.Timestamp transmit_at = 1;
inline bool Delayed::has_transmit_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transmit_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Delayed::_internal_transmit_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.transmit_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Delayed::transmit_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.Delayed.transmit_at)
  return _internal_transmit_at();
}
inline void Delayed::unsafe_arena_set_allocated_transmit_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transmit_at_);
  }
  _impl_.transmit_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.Delayed.transmit_at)
}
inline ::google::protobuf::Timestamp* Delayed::release_transmit_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.transmit_at_;
  _impl_.transmit_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Delayed::unsafe_arena_release_transmit_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.Delayed.transmit_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.transmit_at_;
  _impl_.transmit_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Delayed::_internal_mutable_transmit_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transmit_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.transmit_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.transmit_at_;
}
inline ::google::protobuf::Timestamp* Delayed::mutable_transmit_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_transmit_at();
  // @@protoc_insertion_point(field_mutable:transmit.Delayed.transmit_at)
  return _msg;
}
inline void Delayed::set_allocated_transmit_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transmit_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transmit_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:transmit.Delayed.transmit_at)
}

// -------------------------------------------------------------------

// Interval

// .google.protobuf.Timestamp first_transmission = 1;
inline bool Interval::has_first_transmission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_transmission_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Interval::_internal_first_transmission() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_transmission_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Interval::first_transmission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.Interval.first_transmission)
  return _internal_first_transmission();
}
inline void Interval::unsafe_arena_set_allocated_first_transmission(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_transmission_);
  }
  _impl_.first_transmission_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.Interval.first_transmission)
}
inline ::google::protobuf::Timestamp* Interval::release_first_transmission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.first_transmission_;
  _impl_.first_transmission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Interval::unsafe_arena_release_first_transmission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.Interval.first_transmission)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.first_transmission_;
  _impl_.first_transmission_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Interval::_internal_mutable_first_transmission() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.first_transmission_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_transmission_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_transmission_;
}
inline ::google::protobuf::Timestamp* Interval::mutable_first_transmission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_transmission();
  // @@protoc_insertion_point(field_mutable:transmit.Interval.first_transmission)
  return _msg;
}
inline void Interval::set_allocated_first_transmission(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_transmission_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.first_transmission_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:transmit.Interval.first_transmission)
}

// .google.protobuf.Duration interval = 2;
inline bool Interval::has_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& Interval::_internal_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& Interval::interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.Interval.interval)
  return _internal_interval();
}
inline void Interval::unsafe_arena_set_allocated_interval(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.Interval.interval)
}
inline ::google::protobuf::Duration* Interval::release_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* Interval::unsafe_arena_release_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.Interval.interval)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* Interval::_internal_mutable_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArena());
    _impl_.interval_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.interval_;
}
inline ::google::protobuf::Duration* Interval::mutable_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Duration* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:transmit.Interval.interval)
  return _msg;
}
inline void Interval::set_allocated_interval(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.interval_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.interval_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:transmit.Interval.interval)
}

// uint32 times = 3;
inline bool Interval::has_times() const {
  return Iterate_case() == kTimes;
}
inline void Interval::set_has_times() {
  _impl_._oneof_case_[0] = kTimes;
}
inline void Interval::clear_times() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Iterate_case() == kTimes) {
    _impl_.Iterate_.times_ = 0u;
    clear_has_Iterate();
  }
}
inline ::uint32_t Interval::times() const {
  // @@protoc_insertion_point(field_get:transmit.Interval.times)
  return _internal_times();
}
inline void Interval::set_times(::uint32_t value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:transmit.Interval.times)
}
inline ::uint32_t Interval::_internal_times() const {
  if (Iterate_case() == kTimes) {
    return _impl_.Iterate_.times_;
  }
  return 0u;
}
inline void Interval::_internal_set_times(::uint32_t value) {
  if (Iterate_case() != kTimes) {
    clear_Iterate();
    set_has_times();
  }
  _impl_.Iterate_.times_ = value;
}

// bool infinitely = 4;
inline bool Interval::has_infinitely() const {
  return Iterate_case() == kInfinitely;
}
inline void Interval::set_has_infinitely() {
  _impl_._oneof_case_[0] = kInfinitely;
}
inline void Interval::clear_infinitely() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Iterate_case() == kInfinitely) {
    _impl_.Iterate_.infinitely_ = false;
    clear_has_Iterate();
  }
}
inline bool Interval::infinitely() const {
  // @@protoc_insertion_point(field_get:transmit.Interval.infinitely)
  return _internal_infinitely();
}
inline void Interval::set_infinitely(bool value) {
  _internal_set_infinitely(value);
  // @@protoc_insertion_point(field_set:transmit.Interval.infinitely)
}
inline bool Interval::_internal_infinitely() const {
  if (Iterate_case() == kInfinitely) {
    return _impl_.Iterate_.infinitely_;
  }
  return false;
}
inline void Interval::_internal_set_infinitely(bool value) {
  if (Iterate_case() != kInfinitely) {
    clear_Iterate();
    set_has_infinitely();
  }
  _impl_.Iterate_.infinitely_ = value;
}

inline bool Interval::has_Iterate() const {
  return Iterate_case() != ITERATE_NOT_SET;
}
inline void Interval::clear_has_Iterate() {
  _impl_._oneof_case_[0] = ITERATE_NOT_SET;
}
inline Interval::IterateCase Interval::Iterate_case() const {
  return Interval::IterateCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Cron

// .google.protobuf.Timestamp first_transmission_after = 1;
inline bool Cron::has_first_transmission_after() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.first_transmission_after_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Cron::_internal_first_transmission_after() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.first_transmission_after_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Cron::first_transmission_after() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.Cron.first_transmission_after)
  return _internal_first_transmission_after();
}
inline void Cron::unsafe_arena_set_allocated_first_transmission_after(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_transmission_after_);
  }
  _impl_.first_transmission_after_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transmit.Cron.first_transmission_after)
}
inline ::google::protobuf::Timestamp* Cron::release_first_transmission_after() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.first_transmission_after_;
  _impl_.first_transmission_after_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Cron::unsafe_arena_release_first_transmission_after() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.Cron.first_transmission_after)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.first_transmission_after_;
  _impl_.first_transmission_after_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Cron::_internal_mutable_first_transmission_after() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.first_transmission_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.first_transmission_after_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.first_transmission_after_;
}
inline ::google::protobuf::Timestamp* Cron::mutable_first_transmission_after() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_first_transmission_after();
  // @@protoc_insertion_point(field_mutable:transmit.Cron.first_transmission_after)
  return _msg;
}
inline void Cron::set_allocated_first_transmission_after(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.first_transmission_after_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.first_transmission_after_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:transmit.Cron.first_transmission_after)
}

// string schedule = 2;
inline void Cron::clear_schedule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schedule_.ClearToEmpty();
}
inline const std::string& Cron::schedule() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.Cron.schedule)
  return _internal_schedule();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Cron::set_schedule(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.schedule_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transmit.Cron.schedule)
}
inline std::string* Cron::mutable_schedule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schedule();
  // @@protoc_insertion_point(field_mutable:transmit.Cron.schedule)
  return _s;
}
inline const std::string& Cron::_internal_schedule() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schedule_.Get();
}
inline void Cron::_internal_set_schedule(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.schedule_.Set(value, GetArena());
}
inline std::string* Cron::_internal_mutable_schedule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.schedule_.Mutable( GetArena());
}
inline std::string* Cron::release_schedule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.Cron.schedule)
  return _impl_.schedule_.Release();
}
inline void Cron::set_allocated_schedule(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schedule_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schedule_.IsDefault()) {
          _impl_.schedule_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transmit.Cron.schedule)
}

// uint32 times = 3;
inline bool Cron::has_times() const {
  return Iterate_case() == kTimes;
}
inline void Cron::set_has_times() {
  _impl_._oneof_case_[0] = kTimes;
}
inline void Cron::clear_times() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Iterate_case() == kTimes) {
    _impl_.Iterate_.times_ = 0u;
    clear_has_Iterate();
  }
}
inline ::uint32_t Cron::times() const {
  // @@protoc_insertion_point(field_get:transmit.Cron.times)
  return _internal_times();
}
inline void Cron::set_times(::uint32_t value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:transmit.Cron.times)
}
inline ::uint32_t Cron::_internal_times() const {
  if (Iterate_case() == kTimes) {
    return _impl_.Iterate_.times_;
  }
  return 0u;
}
inline void Cron::_internal_set_times(::uint32_t value) {
  if (Iterate_case() != kTimes) {
    clear_Iterate();
    set_has_times();
  }
  _impl_.Iterate_.times_ = value;
}

// bool infinitely = 4;
inline bool Cron::has_infinitely() const {
  return Iterate_case() == kInfinitely;
}
inline void Cron::set_has_infinitely() {
  _impl_._oneof_case_[0] = kInfinitely;
}
inline void Cron::clear_infinitely() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Iterate_case() == kInfinitely) {
    _impl_.Iterate_.infinitely_ = false;
    clear_has_Iterate();
  }
}
inline bool Cron::infinitely() const {
  // @@protoc_insertion_point(field_get:transmit.Cron.infinitely)
  return _internal_infinitely();
}
inline void Cron::set_infinitely(bool value) {
  _internal_set_infinitely(value);
  // @@protoc_insertion_point(field_set:transmit.Cron.infinitely)
}
inline bool Cron::_internal_infinitely() const {
  if (Iterate_case() == kInfinitely) {
    return _impl_.Iterate_.infinitely_;
  }
  return false;
}
inline void Cron::_internal_set_infinitely(bool value) {
  if (Iterate_case() != kInfinitely) {
    clear_Iterate();
    set_has_infinitely();
  }
  _impl_.Iterate_.infinitely_ = value;
}

inline bool Cron::has_Iterate() const {
  return Iterate_case() != ITERATE_NOT_SET;
}
inline void Cron::clear_has_Iterate() {
  _impl_._oneof_case_[0] = ITERATE_NOT_SET;
}
inline Cron::IterateCase Cron::Iterate_case() const {
  return Cron::IterateCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HealthCheckRequest

// string service = 1;
inline void HealthCheckRequest::clear_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.ClearToEmpty();
}
inline const std::string& HealthCheckRequest::service() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transmit.HealthCheckRequest.service)
  return _internal_service();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HealthCheckRequest::set_service(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transmit.HealthCheckRequest.service)
}
inline std::string* HealthCheckRequest::mutable_service() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:transmit.HealthCheckRequest.service)
  return _s;
}
inline const std::string& HealthCheckRequest::_internal_service() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.service_.Get();
}
inline void HealthCheckRequest::_internal_set_service(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(value, GetArena());
}
inline std::string* HealthCheckRequest::_internal_mutable_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.service_.Mutable( GetArena());
}
inline std::string* HealthCheckRequest::release_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transmit.HealthCheckRequest.service)
  return _impl_.service_.Release();
}
inline void HealthCheckRequest::set_allocated_service(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_.IsDefault()) {
          _impl_.service_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transmit.HealthCheckRequest.service)
}

// -------------------------------------------------------------------

// HealthCheckResponse

// .transmit.HealthCheckResponse.ServingStatus status = 1;
inline void HealthCheckResponse::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::transmit::HealthCheckResponse_ServingStatus HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:transmit.HealthCheckResponse.status)
  return _internal_status();
}
inline void HealthCheckResponse::set_status(::transmit::HealthCheckResponse_ServingStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:transmit.HealthCheckResponse.status)
}
inline ::transmit::HealthCheckResponse_ServingStatus HealthCheckResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transmit::HealthCheckResponse_ServingStatus>(_impl_.status_);
}
inline void HealthCheckResponse::_internal_set_status(::transmit::HealthCheckResponse_ServingStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace transmit


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::transmit::HealthCheckResponse_ServingStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transmit::HealthCheckResponse_ServingStatus>() {
  return ::transmit::HealthCheckResponse_ServingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_transmit_2eproto_2epb_2eh
