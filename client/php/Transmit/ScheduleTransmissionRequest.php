<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transmit.proto

namespace Transmit;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>transmit.ScheduleTransmissionRequest</code>
 */
class ScheduleTransmissionRequest extends \Google\Protobuf\Internal\Message
{
    protected $Schedule;
    protected $Message;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Transmit\Delayed $delayed
     *     @type \Transmit\Interval $interval
     *     @type \Transmit\Cron $cron
     *     @type \Transmit\NatsEvent $nats_event
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transmit::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.transmit.Delayed delayed = 1;</code>
     * @return \Transmit\Delayed|null
     */
    public function getDelayed()
    {
        return $this->readOneof(1);
    }

    public function hasDelayed()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.transmit.Delayed delayed = 1;</code>
     * @param \Transmit\Delayed $var
     * @return $this
     */
    public function setDelayed($var)
    {
        GPBUtil::checkMessage($var, \Transmit\Delayed::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.transmit.Interval interval = 2;</code>
     * @return \Transmit\Interval|null
     */
    public function getInterval()
    {
        return $this->readOneof(2);
    }

    public function hasInterval()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.transmit.Interval interval = 2;</code>
     * @param \Transmit\Interval $var
     * @return $this
     */
    public function setInterval($var)
    {
        GPBUtil::checkMessage($var, \Transmit\Interval::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.transmit.Cron cron = 3;</code>
     * @return \Transmit\Cron|null
     */
    public function getCron()
    {
        return $this->readOneof(3);
    }

    public function hasCron()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.transmit.Cron cron = 3;</code>
     * @param \Transmit\Cron $var
     * @return $this
     */
    public function setCron($var)
    {
        GPBUtil::checkMessage($var, \Transmit\Cron::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.transmit.NatsEvent nats_event = 4;</code>
     * @return \Transmit\NatsEvent|null
     */
    public function getNatsEvent()
    {
        return $this->readOneof(4);
    }

    public function hasNatsEvent()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.transmit.NatsEvent nats_event = 4;</code>
     * @param \Transmit\NatsEvent $var
     * @return $this
     */
    public function setNatsEvent($var)
    {
        GPBUtil::checkMessage($var, \Transmit\NatsEvent::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getSchedule()
    {
        return $this->whichOneof("Schedule");
    }

    /**
     * @return string
     */
    public function getMessage()
    {
        return $this->whichOneof("Message");
    }

}

