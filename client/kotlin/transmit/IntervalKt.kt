// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: transmit.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package transmit;

@kotlin.jvm.JvmName("-initializeinterval")
public inline fun interval(block: transmit.IntervalKt.Dsl.() -> kotlin.Unit): transmit.TransmitOuterClass.Interval =
  transmit.IntervalKt.Dsl._create(transmit.TransmitOuterClass.Interval.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `transmit.Interval`
 */
public object IntervalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: transmit.TransmitOuterClass.Interval.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: transmit.TransmitOuterClass.Interval.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): transmit.TransmitOuterClass.Interval = _builder.build()

    /**
     * `.google.protobuf.Timestamp first_transmission = 1;`
     */
    public var firstTransmission: com.google.protobuf.Timestamp
      @JvmName("getFirstTransmission")
      get() = _builder.getFirstTransmission()
      @JvmName("setFirstTransmission")
      set(value) {
        _builder.setFirstTransmission(value)
      }
    /**
     * `.google.protobuf.Timestamp first_transmission = 1;`
     */
    public fun clearFirstTransmission() {
      _builder.clearFirstTransmission()
    }
    /**
     * `.google.protobuf.Timestamp first_transmission = 1;`
     * @return Whether the firstTransmission field is set.
     */
    public fun hasFirstTransmission(): kotlin.Boolean {
      return _builder.hasFirstTransmission()
    }

    /**
     * `.google.protobuf.Duration interval = 2;`
     */
    public var interval: com.google.protobuf.Duration
      @JvmName("getInterval")
      get() = _builder.getInterval()
      @JvmName("setInterval")
      set(value) {
        _builder.setInterval(value)
      }
    /**
     * `.google.protobuf.Duration interval = 2;`
     */
    public fun clearInterval() {
      _builder.clearInterval()
    }
    /**
     * `.google.protobuf.Duration interval = 2;`
     * @return Whether the interval field is set.
     */
    public fun hasInterval(): kotlin.Boolean {
      return _builder.hasInterval()
    }

    /**
     * `uint32 times = 3;`
     */
    public var times: kotlin.Int
      @JvmName("getTimes")
      get() = _builder.getTimes()
      @JvmName("setTimes")
      set(value) {
        _builder.setTimes(value)
      }
    /**
     * `uint32 times = 3;`
     */
    public fun clearTimes() {
      _builder.clearTimes()
    }
    /**
     * `uint32 times = 3;`
     * @return Whether the times field is set.
     */
    public fun hasTimes(): kotlin.Boolean {
      return _builder.hasTimes()
    }

    /**
     * `bool infinitely = 4;`
     */
    public var infinitely: kotlin.Boolean
      @JvmName("getInfinitely")
      get() = _builder.getInfinitely()
      @JvmName("setInfinitely")
      set(value) {
        _builder.setInfinitely(value)
      }
    /**
     * `bool infinitely = 4;`
     */
    public fun clearInfinitely() {
      _builder.clearInfinitely()
    }
    /**
     * `bool infinitely = 4;`
     * @return Whether the infinitely field is set.
     */
    public fun hasInfinitely(): kotlin.Boolean {
      return _builder.hasInfinitely()
    }
    public val iterateCase: transmit.TransmitOuterClass.Interval.IterateCase
      @JvmName("getIterateCase")
      get() = _builder.getIterateCase()

    public fun clearIterate() {
      _builder.clearIterate()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun transmit.TransmitOuterClass.Interval.copy(block: `transmit`.IntervalKt.Dsl.() -> kotlin.Unit): transmit.TransmitOuterClass.Interval =
  `transmit`.IntervalKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val transmit.TransmitOuterClass.IntervalOrBuilder.firstTransmissionOrNull: com.google.protobuf.Timestamp?
  get() = if (hasFirstTransmission()) getFirstTransmission() else null

public val transmit.TransmitOuterClass.IntervalOrBuilder.intervalOrNull: com.google.protobuf.Duration?
  get() = if (hasInterval()) getInterval() else null

