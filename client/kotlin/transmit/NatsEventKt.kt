// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: transmit.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package transmit;

@kotlin.jvm.JvmName("-initializenatsEvent")
public inline fun natsEvent(block: transmit.NatsEventKt.Dsl.() -> kotlin.Unit): transmit.TransmitOuterClass.NatsEvent =
  transmit.NatsEventKt.Dsl._create(transmit.TransmitOuterClass.NatsEvent.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `transmit.NatsEvent`
 */
public object NatsEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: transmit.TransmitOuterClass.NatsEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: transmit.TransmitOuterClass.NatsEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): transmit.TransmitOuterClass.NatsEvent = _builder.build()

    /**
     * `string subject = 1;`
     */
    public var subject: kotlin.String
      @JvmName("getSubject")
      get() = _builder.getSubject()
      @JvmName("setSubject")
      set(value) {
        _builder.setSubject(value)
      }
    /**
     * `string subject = 1;`
     */
    public fun clearSubject() {
      _builder.clearSubject()
    }

    /**
     * `bytes payload = 2;`
     */
    public var payload: com.google.protobuf.ByteString
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * `bytes payload = 2;`
     */
    public fun clearPayload() {
      _builder.clearPayload()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun transmit.TransmitOuterClass.NatsEvent.copy(block: `transmit`.NatsEventKt.Dsl.() -> kotlin.Unit): transmit.TransmitOuterClass.NatsEvent =
  `transmit`.NatsEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

