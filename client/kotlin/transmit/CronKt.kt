// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: transmit.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package transmit;

@kotlin.jvm.JvmName("-initializecron")
public inline fun cron(block: transmit.CronKt.Dsl.() -> kotlin.Unit): transmit.TransmitOuterClass.Cron =
  transmit.CronKt.Dsl._create(transmit.TransmitOuterClass.Cron.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `transmit.Cron`
 */
public object CronKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: transmit.TransmitOuterClass.Cron.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: transmit.TransmitOuterClass.Cron.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): transmit.TransmitOuterClass.Cron = _builder.build()

    /**
     * `.google.protobuf.Timestamp first_transmission_after = 1;`
     */
    public var firstTransmissionAfter: com.google.protobuf.Timestamp
      @JvmName("getFirstTransmissionAfter")
      get() = _builder.getFirstTransmissionAfter()
      @JvmName("setFirstTransmissionAfter")
      set(value) {
        _builder.setFirstTransmissionAfter(value)
      }
    /**
     * `.google.protobuf.Timestamp first_transmission_after = 1;`
     */
    public fun clearFirstTransmissionAfter() {
      _builder.clearFirstTransmissionAfter()
    }
    /**
     * `.google.protobuf.Timestamp first_transmission_after = 1;`
     * @return Whether the firstTransmissionAfter field is set.
     */
    public fun hasFirstTransmissionAfter(): kotlin.Boolean {
      return _builder.hasFirstTransmissionAfter()
    }

    /**
     * `string schedule = 2;`
     */
    public var schedule: kotlin.String
      @JvmName("getSchedule")
      get() = _builder.getSchedule()
      @JvmName("setSchedule")
      set(value) {
        _builder.setSchedule(value)
      }
    /**
     * `string schedule = 2;`
     */
    public fun clearSchedule() {
      _builder.clearSchedule()
    }

    /**
     * `uint32 times = 3;`
     */
    public var times: kotlin.Int
      @JvmName("getTimes")
      get() = _builder.getTimes()
      @JvmName("setTimes")
      set(value) {
        _builder.setTimes(value)
      }
    /**
     * `uint32 times = 3;`
     */
    public fun clearTimes() {
      _builder.clearTimes()
    }
    /**
     * `uint32 times = 3;`
     * @return Whether the times field is set.
     */
    public fun hasTimes(): kotlin.Boolean {
      return _builder.hasTimes()
    }

    /**
     * `bool infinitely = 4;`
     */
    public var infinitely: kotlin.Boolean
      @JvmName("getInfinitely")
      get() = _builder.getInfinitely()
      @JvmName("setInfinitely")
      set(value) {
        _builder.setInfinitely(value)
      }
    /**
     * `bool infinitely = 4;`
     */
    public fun clearInfinitely() {
      _builder.clearInfinitely()
    }
    /**
     * `bool infinitely = 4;`
     * @return Whether the infinitely field is set.
     */
    public fun hasInfinitely(): kotlin.Boolean {
      return _builder.hasInfinitely()
    }
    public val iterateCase: transmit.TransmitOuterClass.Cron.IterateCase
      @JvmName("getIterateCase")
      get() = _builder.getIterateCase()

    public fun clearIterate() {
      _builder.clearIterate()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun transmit.TransmitOuterClass.Cron.copy(block: `transmit`.CronKt.Dsl.() -> kotlin.Unit): transmit.TransmitOuterClass.Cron =
  `transmit`.CronKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val transmit.TransmitOuterClass.CronOrBuilder.firstTransmissionAfterOrNull: com.google.protobuf.Timestamp?
  get() = if (hasFirstTransmissionAfter()) getFirstTransmissionAfter() else null

